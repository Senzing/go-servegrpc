// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: g2hasher.proto

package g2hasher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// G2HasherClient is the client API for G2Hasher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type G2HasherClient interface {
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error)
	ExportTokenLibrary(ctx context.Context, in *ExportTokenLibraryRequest, opts ...grpc.CallOption) (*ExportTokenLibraryResponse, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	InitWithConfig(ctx context.Context, in *InitWithConfigRequest, opts ...grpc.CallOption) (*InitWithConfigResponse, error)
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
}

type g2HasherClient struct {
	cc grpc.ClientConnInterface
}

func NewG2HasherClient(cc grpc.ClientConnInterface) G2HasherClient {
	return &g2HasherClient{cc}
}

func (c *g2HasherClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error) {
	out := new(DestroyResponse)
	err := c.cc.Invoke(ctx, "/g2hasher.G2Hasher/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2HasherClient) ExportTokenLibrary(ctx context.Context, in *ExportTokenLibraryRequest, opts ...grpc.CallOption) (*ExportTokenLibraryResponse, error) {
	out := new(ExportTokenLibraryResponse)
	err := c.cc.Invoke(ctx, "/g2hasher.G2Hasher/ExportTokenLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2HasherClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/g2hasher.G2Hasher/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2HasherClient) InitWithConfig(ctx context.Context, in *InitWithConfigRequest, opts ...grpc.CallOption) (*InitWithConfigResponse, error) {
	out := new(InitWithConfigResponse)
	err := c.cc.Invoke(ctx, "/g2hasher.G2Hasher/InitWithConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *g2HasherClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/g2hasher.G2Hasher/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// G2HasherServer is the server API for G2Hasher service.
// All implementations must embed UnimplementedG2HasherServer
// for forward compatibility
type G2HasherServer interface {
	Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error)
	ExportTokenLibrary(context.Context, *ExportTokenLibraryRequest) (*ExportTokenLibraryResponse, error)
	Init(context.Context, *InitRequest) (*InitResponse, error)
	InitWithConfig(context.Context, *InitWithConfigRequest) (*InitWithConfigResponse, error)
	Process(context.Context, *ProcessRequest) (*ProcessResponse, error)
	mustEmbedUnimplementedG2HasherServer()
}

// UnimplementedG2HasherServer must be embedded to have forward compatible implementations.
type UnimplementedG2HasherServer struct {
}

func (UnimplementedG2HasherServer) Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedG2HasherServer) ExportTokenLibrary(context.Context, *ExportTokenLibraryRequest) (*ExportTokenLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTokenLibrary not implemented")
}
func (UnimplementedG2HasherServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedG2HasherServer) InitWithConfig(context.Context, *InitWithConfigRequest) (*InitWithConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitWithConfig not implemented")
}
func (UnimplementedG2HasherServer) Process(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedG2HasherServer) mustEmbedUnimplementedG2HasherServer() {}

// UnsafeG2HasherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to G2HasherServer will
// result in compilation errors.
type UnsafeG2HasherServer interface {
	mustEmbedUnimplementedG2HasherServer()
}

func RegisterG2HasherServer(s grpc.ServiceRegistrar, srv G2HasherServer) {
	s.RegisterService(&G2Hasher_ServiceDesc, srv)
}

func _G2Hasher_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2HasherServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2hasher.G2Hasher/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2HasherServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Hasher_ExportTokenLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTokenLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2HasherServer).ExportTokenLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2hasher.G2Hasher/ExportTokenLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2HasherServer).ExportTokenLibrary(ctx, req.(*ExportTokenLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Hasher_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2HasherServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2hasher.G2Hasher/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2HasherServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Hasher_InitWithConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitWithConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2HasherServer).InitWithConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2hasher.G2Hasher/InitWithConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2HasherServer).InitWithConfig(ctx, req.(*InitWithConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _G2Hasher_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(G2HasherServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g2hasher.G2Hasher/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(G2HasherServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// G2Hasher_ServiceDesc is the grpc.ServiceDesc for G2Hasher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var G2Hasher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g2hasher.G2Hasher",
	HandlerType: (*G2HasherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Destroy",
			Handler:    _G2Hasher_Destroy_Handler,
		},
		{
			MethodName: "ExportTokenLibrary",
			Handler:    _G2Hasher_ExportTokenLibrary_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _G2Hasher_Init_Handler,
		},
		{
			MethodName: "InitWithConfig",
			Handler:    _G2Hasher_InitWithConfig_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _G2Hasher_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "g2hasher.proto",
}
